<!DOCTYPE html>
<html>
 <head>
  <meta charset="utf-8" />
  <title>Super tchat</title>
  <style>
  body {
	  font-family: verdana;
	  font-size: 1em;
	  margin: 0px;
	  padding: 0px;
	  width: 100%;
	  height: 100%;
  }

  h1 {
	  text-decoration: underline;
	  font-size: 2em;
	  margin: 0px;
  }

  h2 {
	  text-decoration: underline;
	  font-size: 1.3em;
  }

  header {
	  background-color: azure;
	  border: black 1px dashed;
	  width: calc(100% - 42px);
	  height: 180px;
	  padding: 10px;
	  margin: 10px;
  }

  section#content {
	  background-color: lightblue;
	  border: black 1px solid;
	  width: calc(100% - 42px);
      height: 350px;
	  overflow: auto;
	  padding: 10px;
	  margin: 10px;
  }

  input#message {
	 width: calc(100% - 15px);
  }


  section.showPseudo {
	  text-decoration: underline;
	  font-weight: bold;
  }

  section.showPseudo span {
	  font-weight: normal;
	  font-style: italic;
  }

  section.message {
	  width: 80%;
	  float: left;
	  margin-top: 10px;
	  margin-bottom: 10px;
  }

  section.userMessage {
	  float: right;
  }

  section.userMessage section.showPseudo {
	  background-color: lightsteelblue;
  }

  section.userMessage section.showMessage {
	  background-color: lightcyan;
  }

  section.showMessage {
	  background-color: #b8ecf2;
	  border: black 1px dashed;
	  margin-top: 5px;
	  padding: 5px;
  }

  section.notification {
	  width: 100%;
	  float: left;
	  font-style:italic;
  }

  section.notification hr {
	border: none;
	color: black;
	background-color: black;
	height: 3px;
  }

  </style>
 </head>
 <body>
  <header>
   <h1>[Super tchat]</h1>
   <h2>Pseudo: </h2>
   <p><input type="text" id="message" maxlength="80" placeholder="Message (80 caractères maximum)" /></p>
   <p><button id="sendMessage">Send message</button></p>
  </header>
  <section id="content">&nbsp;</section>
  <script src="./jq.js"></script>
  <script src="/socket.io/socket.io.js"></script>
  <script>
	const socket = io();
	const messageInput = $('input#message');
	const static_getUserId = (function (pId)
	{
		let myStaticVar = -1;

		return function (pId) {
			if(typeof (pId) === typeof (42)) {
				myStaticVar = pId;
			}

			return (myStaticVar);
		};
	})();

	function formatDateTime(value) {
		value = parseInt(value);

		if (value < 10) {
			return ('0' + value);
		}

		return (value);
	}

	function genMsgElToPrepend(pDatas, pDate) {
		return ($('<section class="message' + ((pDatas.userId === static_getUserId()) ? ' userMessage' : '')  +
					'"><section class="showPseudo">[' +
					pDatas.pseudo +
					'] <span class="dateTime">(le ' +
					formatDateTime(pDate.getDate()) +
					'/' + formatDateTime((pDate.getMonth() + 1)) +
					'/' + formatDateTime(pDate.getFullYear()) +
					' à ' + formatDateTime(pDate.getHours()) +
					'h' + formatDateTime(pDate.getMinutes()) +
					')</span></section><section class="showMessage">' +
					pDatas.message +
					'</section></section>').hide(0));
	}

	function genNewUserNotifElToPrepend(pDatas) {
		return ($('section#content').prepend($('<section class="notification"><hr />==> [' + pDatas.pseudo +
				'] vient d\'arriver sur le tchat !<hr /></section>')));
	}

	function genLeftUserNotifElToPrepend(pDatas) {
		return ($('section#content').prepend($('<section class="notification"><hr />==> [' + pDatas.pseudo +
					'] a quitté le tchat !<hr /></section>')));
	}

	$(function () {
		$('input#message').select();

		messageInput.on('keydown', function (e) {
			if (e.keyCode === 13) {
				$('button#sendMessage').click();
			}
		});

   	 	$('button#sendMessage').click(function () {
   	 		socket.emit('csUserMessage', { message: $('input#message').val() });
			messageInput.val('').select();
   	 	});

		socket.on('ssNewMessage', function (datas) {
			if (datas !== null) {
				let nowDate = new Date();
				let prependEl = genMsgElToPrepend(datas, nowDate);

				$('section#content').prepend(prependEl);
				prependEl.show(100);
			}
		});

		socket.on('ssNewUserNotif', function (datas) {
			let prependEl = genNewUserNotifElToPrepend(datas);

			$('section#content').prepend(prependEl);
		});

		socket.on('ssLeftUserNotif', function (datas) {
			let prependEl = genLeftUserNotifElToPrepend(datas);

			$('section#content').prepend(prependEl);
		});

		socket.on('ssUserPseudo', function (datas) {
			$('h2').append(datas.pseudo);
			$('title').append(' - [' + datas.pseudo + ']');
			static_getUserId(datas.userId);
   			socket.emit('csNewUserNotif');
   			socket.emit('csGimmeLastMessages');
		});

		socket.on('ssLastMessages', function (datas) {
			let messages = datas.messages;

			for (let i = 0; i < messages.length; i++) {
				switch (messages[i].type) {
					case 'message':
						let msgDate = new Date(messages[i].timestamp);
						let prependEl = genMsgElToPrepend(messages[i], msgDate);

						$('section#content').append(prependEl.show(0));
						break;
				}
			}
		});
	});

  </script>
 </body>
</html>
